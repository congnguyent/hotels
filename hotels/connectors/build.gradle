plugins {
    id 'org.asciidoctor.convert' version '1.5.3'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'vn.gtd'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

ext {
    set('springBootAdminVersion', '2.1.3')
    set('springCloudVersion', 'Greenwich.SR1')
}

List<String> commons = [
        'vn.gtd:commons:1.0-SNAPSHOT'
]

dependencies {
    implementation commons
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
//    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.axonframework:axon-spring-boot-starter:3.3.7'
    implementation 'org.axonframework:axon-mongo:3.3.7'
    implementation 'org.axonframework:axon-amqp:3.3.7'
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
//    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    implementation 'de.codecentric:spring-boot-admin-starter-client'
//    implementation 'de.codecentric:spring-boot-admin-starter-server'
    implementation 'org.apache.camel:camel-spring-boot-starter:2.23.1'
//    implementation 'org.apache.kafka:kafka-streams'
//    implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
//    implementation 'org.springframework.kafka:spring-kafka'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
//    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
//    testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

//test {
//    outputs.dir snippetsDir
//}
//

ext {
    snippetsDir = file('build/generated-snippets')
}

asciidoctor {
    backends 'html5', 'pdf', 'epub3', 'docbook'
    attributes 'build-gradle': file('build.gradle'),
            'snippets': snippetsDir,
            'sourcedir': project.sourceSets.main.java.srcDirs[0],
            'endpoint-url': 'http://example.org',
            'source-highlighter': 'coderay',
            'imagesdir': './images',
            'toc': 'left',
            'icons': 'font',
            'setanchors': '',
            'idprefix': '',
            'idseparator': '-',
            'docinfo1': ''
    inputs.dir snippetsDir
    outputDir 'build/asciidoc'
    dependsOn test
    sourceDir 'src/main/asciidoc'
}
